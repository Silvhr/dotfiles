snippet snips "all snippets"
/*
beg
BinaryTrie
BinomialCoefficients
FactorsAndDivisors
SumOfDivisors
lcm_gcd
ModularInverse
SOE
DFSin2D
Trie
FenwickTree
MinSeg
MaxSeg
KMP
Z-algorithm
Manacher
SuffixArray
StringSuffixAutomaton
IntegerSuffixAutomaton
UnionFind
TopologicalSort
InverseFactorial
*/
endsnippet

snippet beg "template"
#include<bits/stdc++.h>
using namespace std;
#define ll long long 
const int MAX_N=2e5+1;
const int MOD=1e9+7;
const int INF=1e9;
const ll LINF=1e18;
void solve()
{
   
}
int main()
{
 ios::sync_with_stdio(0);
 cin.tie(0);
 //freopen("input.txt", "r", stdin);
 //freopen("output.txt", "w", stdout);
 int t;
 cin>>t;
 while(t>0)
 {
     solve();
     t--;
 }
 return 0;
}
endsnippet

snippet BinaryTrie "Binary Trie"
class Node{
public:
       int c;
       bool isLeaf;
       Node* children[2];
};
Node *getNode(int c)
{
         Node *node=new Node();
         node->c=c;
         node->isLeaf=false;
         for(int i=0;i<2;i++)
         {
             node->children[i]=NULL;
         }
         return node;
}
class Trie{
private:
    Node *root;
public:
    Trie()
    {
        root=getNode(2);
    }
    static Node *getroot(Trie &trie)
    {
        return trie.root;
    }
};
int calculate(vector<int>& nums,Trie &trie)
{   //Building trie
    for(int i=0;i<nums.size();i++)
    {
         Node *cur=trie.getroot(trie);
         for(int j=31;j>=0;j--)
         {
                int x;
                if(nums[i]&(1<<j))
                    x=1;
                else
                    x=0;
                if(cur->children[x]==NULL)
                {
                    cur->children[x]=getNode(x);
                }
                cur=cur->children[x];
         }
         cur->isLeaf=true;
    } 
    //Finding answer
    int ans=0;
    for(int i=0;i<nums.size();i++)
    {
            Node *cur=trie.getroot(trie);
            int res=0;
            for(int j=31;j>=0;j--)
            {
                int x;
                if(nums[i]&(1<<j))
                    x=1;
                else
                    x=0;
                if(cur->children[x^1])
                {
                    res=(res|(1<<j));
                    cur=cur->children[x^1];
                }
                else
                    cur=cur->children[x];
            }
            ans=max(ans,res);
     }
     return ans;                                                                                          
}    
endsnippet 

snippet BinomialCoefficients "Binomial Coefficients"
#define ll long long 
const int MAX_N=1e6;
const int MOD=1e9+7;
const int INF=1e9;
const ll LINF=1e18;
const int choose_k=4;
long long int C[MAX_N][choose_k];
void precompute()
{
  for(int i=0;i<MAX_N;i++)
  {
      C[i][0]=1;
      if(i<choose_k)
      {
          C[i][i]=1;
      }
      for(int j=1;j<i && j<choose_k;j++)
      {
          C[i][j]=(C[i-1][j]+C[i-1][j-1])%MOD;
      }
  }
  cout<<C[5][3];
}            
endsnippet

snippet FactorsAndDivisors "Factors and Divisors"
void factors(int x,vector<int> &fac,unordered_map<int,int> &f)
{
    int n=x;
    for(int i=2;i*i<=n;i++)
    {
        while(x%i==0)
        {
            if(f[i]==0)
            fac.push_back(i);
            f[i]++;
            x/=i;
        }
        if(x==1)
            break;
    }
    if(x!=1)
    {
        fac.push_back(x);
        f[x]++;
    }
}
void divisors(int x,int pos,int res,vector<int> &fac,vector<int> &div,unordered_map<int,int> &f)
{
     if(pos==(int)fac.size()){
        div.push_back(res);
        return;
     }
     for(int i=0;i<=f[fac[pos]];i++)
     {
        divisors(x,pos+1,res,fac,div,f);
        res*=fac[pos];
     }
}
//Calling function
void solve()
{
   int x;
   cin>>x;
   vector<int> fac;
   unordered_map<int,int> f;
   factors(x,fac,f);
   vector<int> div;
   divisors(x,0,1,fac,div,f);
   for(int s:fac)
    cout<<s<<" ";
   cout<<"\n";
   for(int s:div)
    cout<<s<<" ";
   cout<<"\n";
   vector<int> sum=sum_of_divisors(100);
   for(int d:sum)
    cout<<d<<" ";
}
endsnippet

snippet SumOfDivisors "Sum of Divisors"
vector<int> sum_of_divisors(int N)
{
    vector<int> sum(N,0);
    vector<int> d(N,-1);
    d[1]=1;
    for(int i=2;i*i<N;i++)
    {
        if(d[i]==-1)
        {
            d[i]=i;
            for(int j=i*i;j<N;j+=i)
            {
                if(d[j]==-1)
                    d[j]=i;
            }
        }
    }
    sum[1]=1;
    for(int i=2;i<N;i++)
    {
        if(d[i]==-1)
        {
            d[i]=i;
            sum[i]=i+1;
        }
        else
        {
            int j=i;
            sum[i]=1;
            while(j%d[i]==0)
            {
                j/=d[i];
                sum[i]=sum[i]*d[i]+1;
            }
            sum[i]*=sum[j];
        }
    }
    return sum;
}
endsnippet

snippet lcm_gcd "LCM and GCD"
 vector<long long int> LCM(43);

long long gcd(long long int a, long long int b)
{
  if (b == 0)
    return a;
  return gcd(b, a % b);
}
long long lcm(long long int a, long long int b)
{
    return (a / gcd(a, b)) * b;
}
//Function call
void solve(){
    LCM[1]=1;
    for(int i=2;i<43;i++)
    {
       LCM[i]=lcm(LCM[i-1],i);
    }
}
endsnippet

snippet ModularInverse "Modular Inverse"
 int power(int x, int y, int m) {

   if (y == 0)
      return 1;
   int p = power(x, y / 2, m) % m;
   p = (int)((p * (long long int )p) % m);
   if (y % 2 == 0)
      return p;
   else
      return (int)((x * (long long int)p) % m);
}
int modInverse(int a, int m) {
        return power(a, m - 2, m);
}
//Function call
void solve()
{
     int x=modInverse(5,MOD);
     cout<<x<<"\n";
}
endsnippet

snippet SOE "Sieve of Eratosthenes"
void solve()

{
   int n;
   cin>>n;
   vector<bool> prime(n+1);
   for(int i=0;i<n;i++)prime[i]=true;
   prime[0]=false,prime[1]=false;
   for(int i=2;i*i<=n;i++)
   {
      if(prime[i]==true)
      for(int j=i*i;j<=n;j+=i)prime[j]=false;
   }
   for(int i=2;i<=n;i++)
   {
     if(prime[i]==true)
        cout<<i<<" ";
   }
}
endsnippet

snippet Bitmask "Bitmasking"
#define ll long long 
const int MAX_N=2e5+1;
const int MOD=1e9+7;
const int INF=1e9;
const ll LINF=1e18;
int x=10;
int dp[MAX_N][100];
int calculate(int mask,vector<int> &value,int n,int cur)
{
    if(mask==(1<<n)-1)
    {
       return 1; 
    }
    else if(dp[mask][cur]!=-1)
        return dp[mask][cur];
    int ans=n+1;
    for(int i=0;i<n;i++)
    {
        if(!(mask&(1<<i)))
        {  
           if(cur+value[i]<=x)
           ans=min(ans,calculate(mask^(1<<i),value,n,cur+value[i]));
           else
           ans=min(ans,calculate(mask^(1<<i),value,n,value[i])+1); 
        }
    }
    return dp[mask][cur]=ans;
}
void solve()
{
   vector<int> value{2,3,3,5,6,7,4,8,10};
   int n=value.size();
   int mask=0;
   memset(dp,-1,sizeof dp);
   int ans=calculate(0,value,n,0);
   cout<<ans<<"\n";
}
endsnippet

snippet DFSin2D "DFS in 2D"
//Class Definition and Basic function:
const int INF=1e9;
class Point{
public:
    int x;
    int y;
    Point(int X,int Y){
        x=X;
        y=Y;
    }
};
class Matrix{
public:
    vector<Point> adj;
};
vector<vector<Matrix>> matrix; // Global class Variable
void set_vis_false(vector<vector<bool>> &vis)
{
   for(int i=0;i<vis.size();i++){
       for(int j=0;j<vis[0].size();j++){
          vis[i][j]=false;
       }
   }
}
bool is_valid(int x,int y,int m,int n)
{
   if(x<0 || y<0 ||x>=m ||y>=n)
      return false;
   return true;
}
//Checking if path exist:
bool dfs(Point s,Point &d,vector<vector<bool>> &vis)
{
   vis[s.x][s.y]=true;
   if(s.x==d.x && s.y==d.y)return true;
   bool ans=false;
   for(Point &P:matrix[s.x][s.y].adj)
   {
      if(vis[P.x][P.y]==false)
      {
        ans=(ans||dfs(P,d,vis));
      }
   }
   return ans;
}
//Shortest path:
int min_dfs(Point s,Point &d,vector<vector<bool>> &vis,vector<vector<int>> &min_dp)
{  
   if(s.x==d.x && s.y==d.y)return 0;
   else if(vis[s.x][s.y]==true)
      return min_dp[s.x][s.y];
   vis[s.x][s.y]=true;
   int ans=INF;
   for(Point P:matrix[s.x][s.y].adj)
   {
     ans=min(ans,min_dfs(P,d,vis,min_dp)+1);
   }  
   return min_dp[s.x][s.y]=ans;
}
//Longest path without visiting node twice:
int max_dfs(Point s,Point &d,vector<vector<bool>> &vis)
{  
   if(s.x==d.x && s.y==d.y)
      return 0;
   else if(vis[s.x][s.y]==true)
      return INT_MIN;
   vis[s.x][s.y]=true;
   int ans=INT_MIN;
   for(Point &P:matrix[s.x][s.y].adj)
   {
      ans=max(ans,max_dfs(P,d,vis)+1);
   }
   vis[s.x][s.y]=false;  
   return ans;
}
//Function call:
void solve()
{
     int m=4,n=4;
     vector<vector<Matrix>> matrix_dup(m,vector<Matrix>(n));
     matrix=matrix_dup;
     for(int i=0;i<m;i++)
     {
      for(int j=0;j<n;j++)
      {
         if(is_valid(i+1,j,m,n)==true)
            matrix[i][j].adj.push_back(Point(i+1,j));  //Down
         if(is_valid(i,j+1,m,n)==true)
           matrix[i][j].adj.push_back(Point(i,j+1));   //Right
         if(is_valid(i-1,j,m,n)==true)
           matrix[i][j].adj.push_back(Point(i-1,j));   //Up
         if(is_valid(i,j-1,m,n)==true)
           matrix[i][j].adj.push_back(Point(i,j-1));   //Left
      }
     }
     vector<vector<bool>> vis(m,vector<bool>(n));
     Point s=Point(0,0);
     Point d=Point(2,2);
     
     set_vis_false(vis);
     cout<<(dfs(s,d,vis)==true?"YES":"NO");
 
     set_vis_false(vis);
     vector<vector<int>> min_dp(m,vector<int> (n,INF));
     cout<<"\n"<<min_dfs(s,d,vis,min_dp);
 
     set_vis_false(vis); 
     cout<<"\n"<<max_dfs(s,d,vis); //cannot visit node twice
}
endsnippet

snippet Trie "Trie Data Structure"
//Implementation:
class Node{
    public:
       char c;
       bool isWord;
       int Count;
       int terminating;
       Node* children[26];
};
Node *getNode(char c)
        {
         Node *node=new Node();
         node->c=c;
         node->Count=0;
         node->terminating=0;
         node->isWord=false;
         for(int i=0;i<26;i++)
         {
             node->children[i]=NULL;
         }
         return node;
       }
class Trie{
private:
    Node *root;
public:
    Trie()
    {
        root=getNode('\0');
    }
    void insert(string &word)
    {
        Node *curr=root;
        for(int i=0;i<word.size();i++)
        {
            char c=word[i];
            if(curr->children[c-'a']==NULL)
                curr->children[c-'a']=getNode(c);
            curr=curr->children[c-'a'];
            (curr->Count)=(curr->Count)+1;
        }
        curr->terminating=curr->terminating+1;
        curr->isWord=true;
    }
    int search_count(string word)
    {
        Node *curr=root;
        for(int i=0;i<word.size();i++)
        {
           char c=word[i];
           if(curr->children[c-'a']==NULL)
             return 0;
           curr=curr->children[c-'a'];   
        }
        return curr->terminating;
    }
    int prefix_count(string str)
    {
        Node *curr=root;
        for(int i=0;i<str.size();i++)
        {
           char c=str[i];
           if(curr->children[c-'a']==NULL)
             return 0;
           curr=curr->children[c-'a'];   
        }
        return curr->Count;
    }
    void construct_trie(vector<string> & words)
    {
        for(string &word:words)
        {
            insert(word);
        }
    }
    long long int calculate(string &word,string &a,int k)
    {
        long long int ans=0;
        for(int i=0;i<word.size();i++)
        {
           int t=0;
           Node *curr=root;
           for(int j=i;j<word.size();j++)
           {
              char c=word[j];
              if(a[c-'a']=='0')
                t++;
              if(t>k)
                break;
              if(curr->children[c-'a']==NULL){
                  curr->children[c-'a']=getNode(c);
                  ans++;
              }
              curr=curr->children[c-'a'];
              (curr->Count)=(curr->Count)+1;
           }
           curr->terminating=curr->terminating+1;
           curr->isWord=true;
       }
       return ans;
    }
};
//Function call
void solve()
{
   Trie trie;
   string s;
   cin>>s;
   int n=26;
   string a;
   cin>>a;
   int k;
   cin>>k;
   long long int  ans=trie.calculate(s,a,k);
   cout<<ans<<"\n";
}
endsnippet

snippet FenwickTree "Fenwick Tree"
//Implementation:
void update(int k,int x,vector<int> &trees)
{
    for(;k<trees.size();k+=(k&-k))
    {
        trees[k]+=x;
    }
}
int sum(int k,vector<int> &trees)
{
    int ans=0;
    while(k>=1)
    {
        ans+=trees[k];
        k-=(k&-k);
    }
    return ans;
}
int query(int l,int r,vector<int> &trees)
{
    return sum(r,trees)-sum(l-1,trees);
}
//Function call:
void solve()
{
      int n;
      cin>>n;
      int inp;
      vector<int> a(n);
      for(int i=0;i<n;i++)
      {
         cin>>inp;
         a[i]=inp;
      }
      vector<int> trees(n+1,0);
      for(int i=0;i<n;i++)
      {
        update(i+1,a[i],trees);
      }
      cout<<"\n"<<query(0,4,trees);
}
endsnippet

snippet MinSeg "Minimum Segment Tree"
//Implementation:
void build(int node,int low,int high,vector<int>&a,vector<int> &seg)
{
    if(low==high)
    {
        seg[node]=low;
        return;
    }
    int mid=(low+high)/2;
    build(2*node+1,low,mid,a,seg);
    build(2*node+2,mid+1,high,a,seg);
    if(a[seg[2*node+1]]==a[seg[2*node+2]])
      seg[node]=min(seg[2*node+1],seg[2*node+2]);  // Change here
    else if(a[seg[2*node+1]]<a[seg[2*node+2]])
      seg[node]=seg[2*node+1];
    else
      seg[node]=seg[2*node+2];    
}
void update(int node,int low,int high,int index,int val,vector<int> &a,vector<int> &seg)
{
    if(low==high)
    {
        a[index]=val;
        seg[node]=val;
        return;
    }
    int mid=(low+high)/2;
    if(index<=mid)
        update(2*node+1,low,mid,index,val,a,seg);
    else
        update(2*node+2,mid+1,high,index,val,a,seg);
    seg[node]=min(seg[2*node+1],seg[2*node+2]);     // Change here
}
int query(int node,int low,int high,int l,int r,vector<int> &a,vector<int> &seg)
{
    int mid=(low+high)/2;
    if(l>high || r<low) return -1;
    else if(l<=low && high<=r)
     return seg[node];
    int p=query(2*node+1,low,mid,l,r,a,seg);
    int q=query(2*node+2,mid+1,high,l,r,a,seg); // Change here
    if(p==-1 || q==-1)
    {
        if(p!=-1)
            return p;
        else if(q!=-1)
            return q;
        else 
            return -1;
    }
    if(a[p]==a[q])
      return min(p,q);
    else if(a[p]<a[q])
      return p;
    else if(a[q]<a[p])
      return q;   
}
//Function Call
void solve()
{
    int n;   
    cin>>n;
    int inp;
    vector<int> a(n);
    for(int i=0;i<n;i++)
    {
       cin>>inp;
       a[i]=inp;
    }
    int m=4*n;
    vector<int> seg(m);
    build(0,0,n-1,a,seg);
    ll ans=calculate(0,n-1,seg,n,a);
    cout<<ans<<"\n";

    //cout<<"\n"<<query(0,0,n-1,0,2,a,seg);
    //update(0,0,n-1,3,1,a,seg);
    //cout<<"\n"<<query(0,0,n-1,2,5,a,seg);
}
//Application:
//Divide and conquer + Segment Tree
long long int calculate(int l,int r,vector<int> &seg,int n,vector<int> &a)
{
    if(l>r)
        return 0;
    int m=query(0,0,n-1,l,r,a,seg);
}
endsnippet

snippet MaxSeg "Maximum Segment Tree"
//Implementation:
void build(int node,int low,int high,vector<int>&a,vector<int> &seg)
{
    if(low==high)
    {
        seg[node]=low;
        return;
    }
    int mid=(low+high)/2;
    build(2*node+1,low,mid,a,seg);
    build(2*node+2,mid+1,high,a,seg);
    if(a[seg[2*node+1]]==a[seg[2*node+2]])
      seg[node]=max(seg[2*node+1],seg[2*node+2]);  // Change here
    else if(a[seg[2*node+1] ]>a[(seg[2*node+2])])
      seg[node]=seg[2*node+1];
    else
      seg[node]=seg[2*node+2];    
}
void update(int node,int low,int high,int index,int val,vector<int> &a,vector<int> &seg)
{
    if(low==high)
    {
        a[index]=val;
        seg[node]=val;
        return;
    }
    int mid=(low+high)/2;
    if(index<=mid)
        update(2*node+1,low,mid,index,val,a,seg);
    else
        update(2*node+2,mid+1,high,index,val,a,seg);
    seg[node]=max(seg[2*node+1],seg[2*node+2]);     // Change here
}
int query(int node,int low,int high,int l,int r,vector<int> &a,vector<int> &seg)
{
    int mid=(low+high)/2;
    if(l>high || r<low) return -1;
    else if(l<=low && high<=r)
     return seg[node];
    int p=query(2*node+1,low,mid,l,r,a,seg);
    int q=query(2*node+2,mid+1,high,l,r,a,seg); // Change here
    if(p==-1 || q==-1)
    {
        if(p!=-1)
            return p;
        else if(q!=-1)
            return q;
        else 
            return -1;
    }
    if(a[p]==a[q])
      return min(p,q);
    else if(a[p]>a[q])
      return p;
    else if(a[q]>a[p])
      return q;   
}
//Function call
void solve()
{
    int n;   
    cin>>n;
    int inp;
    vector<int> a(n);
    for(int i=0;i<n;i++)
    {
       cin>>inp;
       a[i]=inp;
    }
    int m=4*n;
    vector<int> seg(m);
    build(0,0,n-1,a,seg);
    long long int ans=calculate(0,n-1,seg,n,a);
    //cout<<ans<<"\n";

    cout<<"\n"<<query(0,0,n-1,0,3,a,seg);
    //update(0,0,n-1,3,1,a,seg);
    //cout<<"\n"<<query(0,0,n-1,2,5,a,seg);
}
//Application:
//Divide and conquer + Segment Tree
long long int calculate(int l,int r,vector<int> &seg,int n,vector<int> &a)
{
    if(l>r)
        return 0;
    int m=query(0,0,n-1,l,r,a,seg);
    return 0;
}
endsnippet

snippet KMP "Knuth–Morris–Pratt"
//Implementation:
vector<int> KMP(string text,string pat)
{
    int n=text.size();
    int m=pat.size();
    vector<int> lps(m);
    int j=0;
    lps[0]=0;
    for(int i=1;i<m;i++)
    {
        if(pat[i]==pat[j])
        {
            j++;
            lps[i]=j;
        }
        else if(pat[i]!=pat[j])   //abcabcababcab //abcab
        {
            if(j>0)
            {
               j=lps[j-1];
               i--;
            }
            else if(j==0)
                lps[i]=0;
        }
    }
    //KMP
    vector<int> ans;
    j=0;
    for(int i=0;i<n;i++)
    {
        if(text[i]==pat[j])
        {
            j++;
        }
        else if(text[i]!=pat[j])
        {
            if(j>0)
            {
                j=lps[j-1];
                i--;
            }
        }
        if(j==m)
        {
            ans.push_back(i-j+1);
            j=lps[j-1];
        }
    }
    return ans;
}
//Function Call:
void solve()
{
    vector<int> ans;
    ans=KMP("abcabcababcab","abcab");
    cout<<"\nANS:";
    for(int x:ans)
        cout<<x<<" ";
}
endsnippet

snippet Z-algorithm "Z-Algorithm"
//Implementation:
vector<int> Z(string text,string pat)
{
    int m=pat.size();
    string total=pat+'!'+text;
    int n=total.size();
    vector<int> temp(n);
    int l=0;
    int r=0;
    temp[0]=0;
    for(int i=1;i<n;i++)
    {
        if(i>r)
        {
            l=i;
            r=i;                                    // 0 1 2 3 4 5 6 7 8 9  10   11  12  13  14  15  16 17  18
            while(r<n && total[r-l]==total[r])      // a b c a b ! a b c a   b   c   a   b   a   b   c   a   b
                r++;                                // 0 0 0 2 0 0 5 0 0
            r--;
            temp[i]=r-l+1;
        }
        else
        {
           int j=i-l;
           if(temp[j]<(r-i+1))    //Should not be equal //Important
           {
               temp[i]=temp[j];
           }
           else
           {
               l=i;
               r=r+1;
               while(r<n && total[r-l]==total[r])
               {
                   r++;
               }
               r--;
               temp[i]=r-l+1;
           }
        }
    }
    vector<int> ans;
    for(int i=m+1;i<n;i++)
        if(temp[i]==m)ans.push_back(i-m-1);
    return ans;
}
//Function call:
void solve()
{
    vector<int> ans;
    ans=Z("abcabcababcab","abcab");
    cout<<"\nANS:";
    for(int x:ans)
        cout<<x<<" ";
}
endsnippet

snippet Manacher "Manacher Algorithm"
//Implementation:
void manacher(String &S)
{
    int m=S.size();
    int n=(2*m)+1;
    int len[n];
    memset(len,0,sizeof len);
    int center=0;
    int right=0;
    string s="";
    s+='$';
    for(int i=0;i<S.size();i++)
    {
        s+=S[i];
        s+='$';
    }
    len[0]=0;
    len[n-1]=0;
    for(int i=1;i<n-1;i++)
    {
        int mirror=center-(i-center);
        if(i<right){
            len[i]=min(right-i,len[mirror]);
        }
        int a=i-len[i]-1;
        int b=i+len[i]+1;
        while(a>=0 && b<n && s[a]==s[b])
        {
            a--;
            b++;
            len[i]++;
        }
        if(i+len[i]>right)
        {
            center=i;
            right=i+len[i];
        }
    }
}
//Application:
//Manacher+ Queue
/* int Len[m];
memset(Len,0,sizeof Len);
int x=0;
for(int i=1;i<n;i+=2){
    Len[x]=1+((len[i]-1)/2);
    x++;
}
int r[m];
queue<array<int,2>> q1,q2;
for(int i=m-1;i>=0;i--){
    while(!q1.empty() && q1.front()[0]-q1.front()[1]>i-1)
    {
        q1.pop();
    }
    r[i]=1+(q1.empty()?0:(q1.front()[0]-i)*2);
    q1.push({i,Len[i]});
}
int l[m];
int first=1;
long long int ans=1;
for(int i=0;i<m-1;i++){
    while(!q2.empty() && q2.front()[0]+q2.front()[1]<i+1){
        q2.pop();
    }
    l[i]=1+(q2.empty()?0:(i-q2.front()[0])*2);
    first=max(first,l[i]);
    ans=max(ans,(long long)first*(r[i+1]));
    q2.push({i,Len[i]});
}
return ans;
*/
endsnippet

snippet SuffixArray "Suffix Array"
//Implementation:
 vector<int> sort_cyclic_shifts(string const& s) {
    int n = s.size();
    const int alphabet = 256;
    vector<int> p(n), c(n), cnt(max(alphabet, n), 0);
    for (int i = 0; i < n; i++)
        cnt[s[i]]++;
    for (int i = 1; i < alphabet; i++)
        cnt[i] += cnt[i-1];
    for (int i = 0; i < n; i++)
        p[--cnt[s[i]]] = i;
    c[p[0]] = 0;
    int classes = 1;
    for (int i = 1; i < n; i++) {
        if (s[p[i]] != s[p[i-1]])
            classes++;
        c[p[i]] = classes - 1;
    }
    vector<int> pn(n), cn(n);
    for (int h = 0; (1 << h) < n; ++h) {
        for (int i = 0; i < n; i++) {
            pn[i] = p[i] - (1 << h);
            if (pn[i] < 0)
                pn[i] += n;
        }
        fill(cnt.begin(), cnt.begin() + classes, 0);
        for (int i = 0; i < n; i++)
            cnt[c[pn[i]]]++;
        for (int i = 1; i < classes; i++)
            cnt[i] += cnt[i-1];
        for (int i = n-1; i >= 0; i--)
            p[--cnt[c[pn[i]]]] = pn[i];
        cn[p[0]] = 0;
        classes = 1;
        for (int i = 1; i < n; i++) {
            pair<int, int> cur = {c[p[i]], c[(p[i] + (1 << h)) % n]};
            pair<int, int> prev = {c[p[i-1]], c[(p[i-1] + (1 << h)) % n]};
            if (cur != prev)
                ++classes;
            cn[p[i]] = classes - 1;
        }
        c.swap(cn);
    }
    return p;
}
vector<int> suffix_array_construction(string s) {
    s += "$"; // Add Dollar here
    vector<int> sorted_shifts = sort_cyclic_shifts(s);
    sorted_shifts.erase(sorted_shifts.begin());
    return sorted_shifts;
}
vector<int> lcp_construction(string const &s,vector<int> const &p)
{
    int n=s.size();
    vector<int> rank(n,0);
    for(int i=0;i<n;i++)
        rank[p[i]]=i;
    int k=0;
    vector<int> lcp(n-1, 0);
    for(int i=0;i<n;i++)
    {
        if(rank[i]==n-1)
        {
            k=0;
            continue;
        }
        int j=p[rank[i]+1];
        while(i+k<n && j+k<n && s[i+k]==s[j+k])
            k++;
        lcp[rank[i]]=k;
        if(k)
            k--;
    }
    return lcp;
}
void solve()
{
   string s;
   cin>>s;
   vector<int> p=suffix_array_construction(s);
   for(int x:p)cout<<x<<"\n";
   vector<int> lcp=lcp_construction(s,p);
   for(int y:lcp)cout<<"\n"<<y;
}
endsnippet

snippet StringSuffixAutomaton "Suffix Automaton for String"
//Implementation:
struct state{
    int len,link;
    map<char,int> next;
};
const int MAXLEN=100000;
vector<state> st;
int sz,last;
void sa_init(){
    st[0].len=0;
    st[0].link=-1;
    sz=1;
    last=0;
}
void sa_extend(char c) {
    int cur = sz++;
    st[cur].len = st[last].len + 1;
    int p = last;
    while (p != -1 && !st[p].next.count(c)) {
        st[p].next[c] = cur;
        p = st[p].link;
    }
    if (p == -1) {
        st[cur].link = 0;
    } else {
        int q = st[p].next[c];
        if (st[p].len + 1 == st[q].len) {
            st[cur].link = q;
        } else {
            int clone = sz++;
            st[clone].len = st[p].len + 1;
            st[clone].next = st[q].next;
            st[clone].link = st[q].link;
            while (p != -1 && st[p].next[c] == q) {
                st[p].next[c] = clone;
                p = st[p].link;
            }
            st[q].link = st[cur].link = clone;
        }
    }
    last = cur;
}

// Building suffix automaton
void sa_build(string &s){
    int n=s.size();
    vector<state> local_st(n*2);
    st=local_st;
    sa_init();
    for(char c:s){
     sa_extend(c);
   }
}
//Application:
//Check if string exist in the Bigger string
bool check_substring(string p){
    int cur=0;
    bool ans=true;
    for(int i=0;i<p.size();i++){
        if(st[cur].next.count(p[i]))
        {
            cur=st[cur].next[p[i]];
        }
        else
            return false;
    }
    return ans;
}
//Total No of different substrings
long long int dp_ways[MAXLEN*2];
long long int no_of_different_substrings(int cur){
    if(dp_ways[cur]!=-1)
        return dp_ways[cur];
    long long int ans=0;
    for(pair<char,int> p:st[cur].next){
        ans+=no_of_different_substrings(p.second);  
    }
    return dp_ways[cur]=ans+1;
}
//Total length of different substring
long long int Total_length[MAXLEN*2];
long long int total_length(int cur){
    if(Total_length[cur]!=-1)
        return Total_length[cur];
    long long int ans=0;
    for(pair<char,int> p:st[cur].next){
        ans=ans+dp_ways[p.second]+total_length(p.second);
    }
    return Total_length[cur]=ans;
}
//To find Kth lexicographically smallest (Different substrings)
string k_ans="";
void lex_path(int cur,int k){
    if(k>dp_ways[0]-1)
        return;
    if(k<=0)
        return;
    int path=0;
    for(pair<char,int> p: st[cur].next){
        if(path+dp_ways[p.second] <k)
        {
            path+=dp_ways[p.second];
        }
        else{
            path+=1;
            k_ans+=p.first;
            lex_path(p.second,k-path);
            break;
        }
    }
}
//To find the longest common substring of two string 
string lcs(string s, string t)
{
    string ans;
    sa_build(s);
    int v=0,l=0,best=0,bestpos=0;
    for(int i=0;i<t.size();i++)
    {
        while(v && !st[v].next.count(t[i]))
        {
            v=st[v].link;
            l=st[v].len;
        }
        if(st[v].next.count(t[i]))
        {
            v=st[v].next[t[i]];
            l++;
        }
        if(l>best){
            best=l;
            bestpos=i;
        }
    }
    ans=t.substr(bestpos-best+1,best);
    return ans;
}
//To find the longest common substring of multiple string
string lcs_multiple(vector<string> &S)
{
    int n=S.size();
    sa_build(S[0]);
    string ans;
    int best=0,bestpos=0;
    for(int i=1;i<n;i++)
    {
        int v=0,l=0;
        string next="";
        for(int j=0;j<=S[i].size();j++)
        {
            if(j==S[i].size() || !st[v].next.count(S[i][j]))
            {
                if(i==n-1)
                {
                     if(l>best)
                     {
                        best=l;
                        bestpos=j-1;
                     }
                }
                else
                {
                    //next.insert(next.end(),S[i].begin()+j-l,S[i].begin()+j);
                    //next.push_back('#');
                    next+=S[i].substr(j-l,l);
                    next+='#';
                }
            }
            while(j<S[i].size() && v && !st[v].next.count(S[i][j]))
            {
                v=st[v].link;
                l=st[v].len;
            }
            if(j<S[i].size() && st[v].next.count(S[i][j]))
            {
                v=st[v].next[S[i][j]];
                l++;
            }
        }
        sa_build(next);
    }
    ans=S[n-1].substr(bestpos-best+1,best);
    return ans;
}
//Function call:
void solve()
{
   string s;
   cin>>s;
   sa_build(s);

   cout<<check_substring("abc")<<"\n";
   
   //Total No of different substrings
   memset(dp_ways,-1,sizeof dp_ways);
   cout<<"Total No of different substrings:"<<no_of_different_substrings(0)-1<<"\n";
  
   // Total length of different substring
   memset(Total_length,-1,sizeof Total_length);
   cout<<"Total length of different substring:"<<total_length(0)<<"\n";
   
   // To find Kth lexicographically smallest (Different substrings)
   int k=13;
   lex_path(0,k);
   cout<<k_ans<<"\n";

   // To find the longest common substring of two string
   string S,T;
   cin>>S>>T;
   string ans_lcs=lcs(S,T);
   cout<<"Longest common substring of s and t:"<<ans_lcs<<"\n";

   // To find the longest common substring of multiple strings
   vector<string> mul;
   for(int i=0;i<4;i++)
   {
      string p;
      cin>>p;
      mul.push_back(p);
   }
   string ans_lcs_mul=lcs_multiple(mul);
   cout<<"Longest common substring of multiple string is:"<<ans_lcs_mul<<"\n";
}
endsnippet

snippet IntegerSuffixAutomaton "Suffix Automaton for Integers"
//Longest common subarray of multiple arrays
struct state{
    int len,link;
    unordered_map<int,int> next;
};
vector<state> st;
int sz,last;
void sa_init(){
    st[0].len=0;
    st[0].link=-1;
    sz=1;
    last=0;
}
void sa_extend(int c) {
    int cur = sz++;
    st[cur].len = st[last].len + 1;
    int p = last;
    while (p != -1 && !st[p].next.count(c)) {
        st[p].next[c] = cur;
        p = st[p].link;
    }
    if (p == -1) {
        st[cur].link = 0;
    } else {
        int q = st[p].next[c];
        if (st[p].len + 1 == st[q].len) {
            st[cur].link = q;
        } else {
            int clone = sz++;
            st[clone].len = st[p].len + 1;
            st[clone].next = st[q].next;
            st[clone].link = st[q].link;
            while (p != -1 && st[p].next[c] == q) {
                st[p].next[c] = clone;
                p = st[p].link;
            }
            st[q].link = st[cur].link = clone;
        }
    }
    last = cur;
}
void sa_build(vector<int> &s){
    int n=s.size();
    vector<state> local_st(n*2);
    st=local_st;
    sa_init();
    for(int c:s){
     sa_extend(c);
   }
}
int lcs_multiple(vector<vector<int>> &S)
{
    int n=S.size();
    sa_build(S[0]);
    string ans;
    int best=0,bestpos=0;
    for(int i=1;i<n;i++)
    {
        int v=0,l=0;
        vector<int> next;
        for(int j=0;j<=S[i].size();j++)
        {
            if(j==S[i].size() || !st[v].next.count(S[i][j]))
            {
                if(i==n-1)
                {
                     if(l>best)
                     {
                        best=l;
                        bestpos=j-1;
                     }
                }
                else
                {
                    next.insert(next.end(),S[i].begin()+j-l,S[i].begin()+j);
                    next.push_back(100001);
                    //next+=S[i].substr(j-l,l);
                    //next+='#';
                }
            }
            while(j<S[i].size() && v && !st[v].next.count(S[i][j]))
            {
                v=st[v].link;
                l=st[v].len;
            }
            if(j<S[i].size() && st[v].next.count(S[i][j]))
            {
                v=st[v].next[S[i][j]];
                l++;
            }
        }
        sa_build(next);
    }
    return best;
}
int longestCommonSubarray(int n, vector<vector<int>>& a) 
{
     return lcs_multiple(a);
}
endsnippet

snippet UnionFind "Union Find Algorithm"
//Implementation:
int parent(int x,vector<int> &link)
{
    while(link[x]!=x)x=link[x];
}
 void Union(int x,int y,vector<int> &link,vector<int> &len)
 {
        if(x==y)return;
        while(x!=link[x])x=link[x];
        while(y!=link[y])y=link[y];
        if(x==y)return;
        if(len[x]<len[y])swap(x,y);
        link[y]=x;
        len[x]+=len[y];
 }
void solve()
{
    int n;
    cin>>n;
    vector<int> link(n);
    vector<int> len(n);
    for(int i=1;i<10;i++)link[i]=i;
    for(int i=1;i<10;i++)len[i]=1;
    vector<vector<int>> edges{{1,4},{7,4},{6,3},{8,3},{3,2}};
    for(vector<int> e:edges)
        Union(e[0],e[1],link,len);
    int ans=0;
    for(int i=1;i<10;i++)
    {
        if(link[i]==i)ans++;
    } 
    cout<<ans;
}
endsnippet

snippet TopologicalSort "Topological Sort"
//Implementation:
void topological_sort_helper(int s,vector<vector<int>> &adj,vector<int> &res,vector<bool> &vis)
{
    if(vis[s]==true)
        return;
    vis[s]=true;
    for(int t:adj[s])
        topological_sort_helper(t,adj,res,vis);
    res.push_back(s);
}
vector<int> topological_sort(int n,vector<vector<int>> &adj)
{
    vector<int> res;
    vector<bool> vis(n+1);
    for(int i=0;i<=n;i++)vis[i]=false;
    for(int i=1;i<=n;i++)
    {
        if(!vis[i])topological_sort_helper(i,adj,res,vis);
    }
    reverse(res.begin(),res.end());
    return res;
}
void solve()
{
    int n=6;
    vector<vector<int>> edges{{4,1},{4,5},{3,6},{5,3},{5,2}};
    vector<vector<int>> adj(n+1);
    for(int i=0;i<edges.size();i++)
      adj[edges[i][0]].push_back(edges[i][1]);
    vector<int> res=topological_sort(n,adj);
    for(int x:res)cout<<x<<" ";
}
//Cyclic find and topological sort:
int dp[2001];
bool vis[2001];
vector<int> res;
bool isnotcyclic(int s,vector<vector<int>> &adj)
{
    if(dp[s]!=-1)return dp[s];
    if(vis[s]==true)return false;
    vis[s]=true;
    bool ans=true;
    for(int &x:adj[s])ans=ans&(isnotcyclic(x,adj));
    return dp[s]=ans;
}
void topological_sort(int s,vector<vector<int>> &adj)
{
    if(vis[s]==true) return;
    vis[s]=true;
    for(int &x:adj[s])
        topological_sort(x,adj);
    res.push_back(s);
}
vector<int> findOrder(int n, vector<vector<int>>& p) {
    vector<vector<int>> adj(n);
    for(vector<int> &e:p)adj[e[0]].push_back(e[1]);
    bool ans=true;
    memset(dp,-1,sizeof dp);
    for(int i=0;i<n;i++)vis[i]=false;
    for(int i=0;i<n;i++)
        ans=ans&(isnotcyclic(i,adj));
    if(ans==false)return res;
    for(int i=0;i<n;i++)vis[i]=false;
    for(int i=0;i<n;i++)
        topological_sort(i,adj);
    return res;
}
endsnippet
